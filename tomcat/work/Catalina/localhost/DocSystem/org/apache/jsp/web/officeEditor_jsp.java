/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.56
 * Generated at: 2020-06-23 15:51:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.web;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.DocSystem.controller.*;

public final class officeEditor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

String officeEditorApi = BaseController.getOfficeEditor();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"officePlayer\" class=\"officePlayer\" style=\"width: 100%; height: 1000px;\">\r\n");
      out.write("\t<div id=\"placeholder\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(officeEditorApi);
      out.write("\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var height =  window.screen.height;\r\n");
      out.write("console.log(\"window height=\" + height)\r\n");
      out.write("height *= 0.95;\r\n");
      out.write("console.log(\"dialog height=\" + height)\r\n");
      out.write("document.getElementById('officePlayer').style.height = height + \"px\";\r\n");
      out.write("\r\n");
      out.write("var OfficeEditor = (function () {\r\n");
      out.write("\tvar editor = null;\r\n");
      out.write("\tvar docInfo = null;\r\n");
      out.write("    var fileType = null;\r\n");
      out.write("    var documentType = null;\r\n");
      out.write("    var title = null;\r\n");
      out.write("    var key = null;\r\n");
      out.write("    \r\n");
      out.write("\tfunction officeEditorPageInit(Input_doc)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tconsole.log(\"officeEditorPageInit InputDoc:\", Input_doc);\r\n");
      out.write("\t\tdocInfo = Input_doc;\r\n");
      out.write("\t    fileType = getFileSuffix(docInfo.name);\r\n");
      out.write("\t    documentType = getDocumentType(fileType);\r\n");
      out.write("\t    title = docInfo.name;\r\n");
      out.write("\t    \r\n");
      out.write("\t    getDocOfficeLink(docInfo, showOffice, showErrorMessage, \"REST\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("    function showOffice(data)\r\n");
      out.write("   \t{\r\n");
      out.write("\t\tvar fileLink = buildFullLink(data.fileLink);\r\n");
      out.write("\t\tvar saveFileLink = \"\";\r\n");
      out.write("\t\tvar key = data.key + \"\";\r\n");
      out.write("    \t\r\n");
      out.write("    \tconsole.log(\"showOffice() title=\" + title + \" key=\" + key + \" fileType=\" + fileType + \" documentType=\" + documentType + \" fileLink=\"+fileLink + \" saveFileLink:\" + saveFileLink);\r\n");
      out.write("\t\tvar type = 'desktop';\r\n");
      out.write("    \tvar width = \"100%\";\r\n");
      out.write("\t\tif(gIsPC == false)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\ttype = 'mobile';\r\n");
      out.write("\t\t\twidth = \"90%\";\r\n");
      out.write("\t\t}\r\n");
      out.write("    \t\r\n");
      out.write("\t\tvar editEn =  data.editEn == 1? true:false;\r\n");
      out.write("\t\tvar mode = \"view\";\r\n");
      out.write("\t\tif(editEn == true)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tsaveFileLink = buildFullLink(data.saveFileLink);\r\n");
      out.write("\t\t\tmode = \"edit\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar downloadEn = data.downloadEn == 1? true:false;\r\n");
      out.write("\t\tconsole.log(\"editEn:\" + editEn + \" downloadEn:\" + downloadEn);\r\n");
      out.write("\t\tvar user = {\r\n");
      out.write("                \"id\": data.userId + \"\",\r\n");
      out.write("                \"name\": data.userName,\r\n");
      out.write("            };\r\n");
      out.write("\t\t\r\n");
      out.write("    \tvar config = {\r\n");
      out.write("\t\t\t\t\"type\" : type,\r\n");
      out.write("    \t\t    \"document\": {\r\n");
      out.write("    \t\t        \"fileType\": fileType,\r\n");
      out.write("    \t\t        \"key\": key,\r\n");
      out.write("    \t\t        \"title\": title,\r\n");
      out.write("    \t\t        \"url\": fileLink,\r\n");
      out.write("    \t\t        \"permissions\": {\r\n");
      out.write("    \t\t            \"comment\": editEn,\r\n");
      out.write("    \t\t            \"download\": downloadEn,\r\n");
      out.write("    \t\t            \"edit\": editEn,\r\n");
      out.write("    \t\t            \"fillForms\": true,\r\n");
      out.write("    \t\t            \"modifyContentControl\": editEn,\r\n");
      out.write("    \t\t            \"modifyFilter\": editEn,\r\n");
      out.write("    \t\t            \"print\": downloadEn,\r\n");
      out.write("    \t\t            \"review\": true\r\n");
      out.write("    \t\t        },\r\n");
      out.write("    \t\t    },\r\n");
      out.write("    \t\t    \"documentType\": documentType,\r\n");
      out.write("    \t\t    \"editorConfig\": {\r\n");
      out.write("    \t\t    \t\"mode\": mode,\r\n");
      out.write("                    \"callbackUrl\": saveFileLink,\r\n");
      out.write("                    \"lang\": \"zh-CN\",\r\n");
      out.write("                    \"user\": user,\r\n");
      out.write("                },\r\n");
      out.write("                \"height\": \"100%\",\r\n");
      out.write("                \"width\": width,\r\n");
      out.write("    \t};\r\n");
      out.write("        editor = new DocsAPI.DocEditor(\"placeholder\", config);\r\n");
      out.write("   \t}\r\n");
      out.write("\r\n");
      out.write("    //开放给外部的接口\r\n");
      out.write("    return {\r\n");
      out.write("        officeEditorPageInit: function(docInfo){\r\n");
      out.write("        \tofficeEditorPageInit(docInfo);\r\n");
      out.write("        },\r\n");
      out.write("    };\r\n");
      out.write("})();\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
